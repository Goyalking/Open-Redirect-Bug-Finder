import requests
import sys
from urllib.parse import urlparse, urlencode
import os

# Common redirect payloads
REDIRECT_PAYLOADS = [
    "http://evil.com",
    "https://evil.com",
    "ftp://evil.com",
    "javascript:alert('XSS')"
]

# Function to check open redirect vulnerability for a given URL and payload
def check_open_redirect(url):
    print(f"Checking URL: {url}")
    try:
        # Send the request with potential redirection payloads
        for payload in REDIRECT_PAYLOADS:
            new_url = f"{url}{payload}"
            response = requests.get(new_url, allow_redirects=True)

            # Check for HTTP status code 200
            if response.status_code == 200:
                print(f"[+] Open redirect found with payload: {payload}")
                print(f"Redirecting to: {response.url}")
                print(f"Final status code: {response.status_code} - OK\n")
                return True
    except requests.exceptions.RequestException as e:
        print(f"[!] Error checking URL: {e}")
    
    return False


# Function to test various query parameters and paths for open redirect vulnerability
def test_open_redirect_in_paths(base_url, wordlist):
    vulnerable = False

    # Check the custom paths from the wordlist
    for path in wordlist:
        test_url = f"{base_url}/{path}"
        vulnerable |= check_open_redirect(test_url)

    # Check query parameters for open redirect
    parsed_url = urlparse(base_url)
    base_url_without_params = parsed_url.scheme + "://" + parsed_url.netloc
    query_params = parsed_url.query

    if query_params:
        params = {k: v for k, v in [param.split('=') for param in query_params.split('&')]}
    else:
        params = {}

    # Test query parameters with payloads
    for payload in REDIRECT_PAYLOADS:
        for param in params:
            new_params = params.copy()
            new_params[param] = payload
            new_url = base_url_without_params + '?' + urlencode(new_params)
            vulnerable |= check_open_redirect(new_url)

    if not vulnerable:
        print("[+] No open redirect vulnerabilities found.\n")
    return vulnerable


# Function to load custom wordlist from file
def load_wordlist(file_path):
    if not os.path.isfile(file_path):
        print(f"[!] Wordlist file '{file_path}' not found.")
        sys.exit(1)
    
    with open(file_path, 'r') as f:
        wordlist = [line.strip() for line in f.readlines() if line.strip()]
    
    return wordlist


def main():
    if len(sys.argv) != 3:
        print("Usage: python open_redirect_finder.py <target_url> <wordlist_file>")
        sys.exit(1)

    target_url = sys.argv[1]
    wordlist_file = sys.argv[2]

    if not target_url.startswith(('http://', 'https://')):
        print("Please provide a valid URL starting with http:// or https://.")
        sys.exit(1)

    # Load custom wordlist
    wordlist = load_wordlist(wordlist_file)

    print("\n[+] Starting open redirect vulnerability scan...\n")
    
    # Test the target URL and its common paths for open redirects
    test_open_redirect_in_paths(target_url, wordlist)

    # Signature at the end of the script
    print("\n\n========================================")
    print("MADE BY GOYAL")
    print("========================================")


if __name__ == "__main__":
    main()
